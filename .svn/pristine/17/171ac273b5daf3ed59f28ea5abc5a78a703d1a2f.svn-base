<?php

namespace app\home\controllers;

use app\home\models\DriverGoods;
use app\home\models\searchs\GoodsSearch;
use Yii;
use app\home\models\Driver;
use app\home\models\searchs\DriverSearch;
use app\base\lib\Utils;
use yii\widgets\ActiveForm;
use app\home\components\BaseController;
use yii\web\NotFoundHttpException;
use yii\filters\VerbFilter;

/**
 * DriverController implements the CRUD actions for Driver model.
 */
class DriverController extends BaseController
{

    /**
     * Lists all Driver models.
     * @return mixed
     */
    public function actionIndex()
    {
        $searchModel = new DriverSearch();
        $params = Yii::$app->request->queryParams;
        $params['platform_id'] = $this->platform_id;
        $dataProvider = $searchModel->search($params);

        return $this->render('index', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    /**
     * Displays a single Driver model.
     * @param integer $id
     * @return mixed
     */
    public function actionView($id)
    {
        $searchModel = new GoodsSearch();
        $params = Yii::$app->request->queryParams;
        $params['platform_id'] = $this->platform_id;
        $dataProvider = $searchModel->search($params);

        return $this->render('view', [
            'model' => $this->findModel($id),
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    /**
     * Creates a new Driver model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return mixed
     */
    public function actionCreate()
    {
        $model = new Driver();

        if ($model->load(Yii::$app->request->post())) {
            $ret = ActiveForm::validate($model);
            if (!$this->commit) {
                return $ret;
            } else {
                $model->platform_id = $this->platform_id;
                $model->limit_days = $model->limit_days ? implode(',', $model->limit_days) : 0;
                $model->save();
                $msg = "添加司机[{$model->username}]成功";
                Utils::log('create', $msg);
                return ['status' => true, 'message' => $msg];
            }
        } else {
            return $this->render('create', [
                'model' => $model,
            ]);
        }
    }

    /**
     * Updates an existing Driver model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param integer $id
     * @return mixed
     */
    public function actionUpdate($id)
    {
        $model = $this->findModel($id);
        $model->limit_days = explode(',', $model->limit_days);
        if ($model->load(Yii::$app->request->post())) {
            $ret = ActiveForm::validate($model);
            if (!$this->commit) {
                return $ret;
            } else {
                $model->limit_days = $model->limit_days ? implode(',', $model->limit_days) : 0;
                $model->save();

                $msg = "编辑司机[{$model->username}]成功";
                Utils::log('update', $msg);
                return ['status' => true, 'message' => $msg];
            }
        } else {
            return $this->render('update', [
                'model' => $model,
            ]);
        }
    }

    /**
     * Deletes an existing Driver model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param integer $id
     * @return mixed
     */
    public function actionDelete($id)
    {
        $model = $this->findModel($id);
        $model->delete();
        $msg = "删除司机[{$model->username}]成功";
        Utils::log('delete', $msg);
        return ['status' => true, 'message' => $msg];
    }

    /**
     * Finds the Driver model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param integer $id
     * @return Driver the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = Driver::findOne($id)) !== null) {
            return $model;
        } else {
            throw new NotFoundHttpException('The requested page does not exist.');
        }
    }

    public function actionGoodsNum()
    {
        if (Yii::$app->request->isAjax) {
            $driver_id = Yii::$app->request->post('driver_id');
            $goods_id = Yii::$app->request->post('goods_id');
            $num = Yii::$app->request->post('num');
            $model = new DriverGoods();
            $driverGoods = $model->find()->where(['driver_id' => $driver_id, 'goods_id' => $goods_id])->one();
            if (!$driverGoods) {
                $model->driver_id = $driver_id;
                $model->goods_id = $goods_id;
                $model->created_at = time();
                $model->num = $num;
                $model->save();
            }else {
                $driverGoods->num = $num;
                $driverGoods->save();
            }
            return ['status'];
        }

    }
}
