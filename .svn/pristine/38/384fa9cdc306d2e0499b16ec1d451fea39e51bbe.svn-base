<?php
/**
 * Created by PhpStorm.
 * User: yangchunrun
 * Date: 17/4/19
 * Time: 下午6:44
 */

namespace app\admin\api;


use app\admin\models\Admin;
use app\admin\models\Notice;
use app\api\components\BaseApi;
use app\base\models\Config;

class AuditNotice extends BaseApi
{
    protected function rules()
    {
        return [
            'access_token' => ['required' => true, 'name' => 'access_token', "message" => "access_token是必需的"],
            'notice_id' => ['required' => true, 'name' => '通知id'],
            'note' => ['name' => '意见'],
            'type' => ['required' => true, 'name' => '类型', 'info' => '1停电审核 2供电审核'],
            'status' => ['required' => true, 'name' => '状态', 'info' => '1通过,2不通过'],
        ];
    }

    public function run()
    {
        $params = $this->params;
        $admin = new Admin();
        $user = $admin->getUserByToken($params['access_token']);
        if (!$user) {
            return $this->formatData([], 1005, 'token不正确!');
        }

        $id = $params['notice_id'];
        $note = $params['note'];
        $type = $params['type'];
        $status = $params['status'];
        $model = Notice::findOne($id);
        if (!in_array($model->status, [0, 3])) {
            return $this->formatData([], 1005, '不是待审核状态');
        }
        if ($type == 1) {
            $model->status = $status == 1 ? 1 : 2;
        } else {

            $model->status = $status == 1 ? 4 : 5;

        }
        $model->checked_at = time();
        $model->note = $note;
        $model->save();

        switch ($model->status) {
            case 1:
                $datax = ['action' => '/push/run', 'params' => [$id]];
                \Yii::$app->swooleAsync->async($datax);
                break;
            case 2:
                $datax = ['action' => '/push/remind2', 'params' => [$id]];
                \Yii::$app->swooleAsync->async($datax);
                break;
            case 5:
                $datax = ['action' => '/push/remind2', 'params' => [$id]];
                \Yii::$app->swooleAsync->async($datax);
                break;
        }


        return $this->formatData([]);

    }

}