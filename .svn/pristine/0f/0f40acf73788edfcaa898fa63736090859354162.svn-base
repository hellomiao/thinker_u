<?php

/**
 * Created by PhpStorm.
 * User: yangchunrun
 * Date: 16/3/24
 * Time: 上午9:26
 */
namespace app\api\components;

use app\home\models\User;
use yii\base\Exception;
use yii;
use app\base\lib\Validators;

abstract class BaseApi extends yii\base\Component
{

    abstract protected function rules();

    abstract public function run();

    public $access_token;

    public $needToken = true;

    public $user;

    public $params;

    public function getRules()
    {
        $rules = $this->rules();
        $new = [];
        foreach ($rules as $key => $val) {
            $regular = $val['regular'] ? "正则: {$val['regular']} " : "";
            if ($val['min'] && $val['max']) {

                if ($val['min'] == $val['max']) {
                    $regular .= "长度: {$val['min']}";
                } else {
                    $regular .= "长度: {$val['min']}~{$val['max']}";
                }

            }
            $val['regular_str'] = $regular;
            $new[$key] = $val;
        }

        return $new;

    }


    public function check()
    {

        $params = $this->params;

        if ($this->needToken) {


            if (!isset($params['access_token'])) {
                throw new Exception('access_token是必须参数', 11001);
            }

            $this->access_token = $params['access_token'];


            $user = new User();
            $this->user = $user->getUserByToken($this->access_token);
            if (!$user) {
                throw new Exception('用户不存在或者token异常', 2000);
            }

        }

        // TODO: Change the autogenerated stub
        $rules = $this->rules();

        $ret = [];
//

        foreach ((array)$rules as $key => $val) {
            $validators = new Validators();
            $validators->value = $params[$key];

            if ($val['required'] && !isset($validators->value)) {
                $ret = $this->formatData("缺少必须参数[{$val['name']}-{$key}]", false, 1003);
                break;
            }

            if (isset($val['min']) && isset($val['max']) && $val['required']) {

                $len = mb_strlen($validators->value);
                if ($val['min'] != $val['max']) {

                    if ($len < $val['min'] || $len > $val['max']) {
                        $ret = $this->formatData("参数[{$val['name']}-{$key}]长度应大于{$val['min']},小于{$val['max']}", false, 1003);
                        break;
                    }
                } else {

                    if ($len != $val['min']) {
                        $ret = $this->formatData("参数[{$val['name']}-{$key}]长度应等于{$val['min']}", false, 1003);
                        break;
                    }
                }
            }

            $validators->message = $val['message'];

            if ($val['type'] && $val['required']) {
                switch ($val['type']) {
                    case 'number':
                        $r = $validators->number();
                        break;
                    case 'phone':
                        $r = $validators->phone();
                        break;
                    case 'pwd':
                        $r = $validators->pwd();
                        break;
                    default:
                        if (isset($val['regular'])) {
                            $r = $validators->doMatch($val['regular']);
                        }
                        break;
                }
                if (!$r['status']) {
                    $ret = $this->formatData($r['message'], false, 1003);

                }


            }

        }


        return $ret;
    }

    public function formatData($data = [], $isOk = true, $code = 1000)
    {


        $res = [];
        $res['ok'] = $isOk;
        $res['servertime'] = time();
        if (!$isOk) {
            $res['errorid'] = $code;
            $res['error'] = $data;
        } else {

            $res = $res + $data;
        }
        $res['hasmore'] = isset($data['hasmore']) ? $data['hasmore'] : false;
        if (isset($data['hasmore'])) {

            unset($data['hasmore']);
        }
        return $res;

    }

    public function getModelError($model)
    {
        $errors = $model->getErrors();    //得到所有的错误信息
        if (!is_array($errors)) return '';
        $firstError = array_shift($errors);
        if (!is_array($firstError)) return '';
        $error = array_shift($firstError);
        $error = str_replace('"', '', $error);
        return $this->formatData([], 1003, $error);
    }


}