<?php
/**
 * Created by PhpStorm.
 * User: yangchunrun
 * Date: 17/4/19
 * Time: 下午6:44
 */

namespace app\admin\api;


use app\admin\models\Admin;
use app\admin\models\Line;
use app\admin\models\Notice;
use app\admin\models\NoticeLine;
use app\api\components\BaseApi;
use app\base\lib\Utils;
use app\base\models\Config;
use yii\base\Exception;

class AddNotice extends BaseApi
{
    protected function rules()
    {
        return [
            'access_token' => ['required' => true, 'name' => 'access_token', "message" => "access_token是必需的"],
            'reason' => ['required' => true, 'name' => '停电原因'],
            'start_time' => ['required' => true, 'name' => '开始时间'],
            'end_time' => ['required' => true, 'name' => '结束时间'],
            'info' => ['required' => true, 'name' => '备注信息'],
            'line_ids' => ['required' => true, 'name' => '线路ids'],
        ];
    }

    public function run()
    {
        $transaction = \Yii::$app->db->beginTransaction();
        try {

            $params = $this->params;
            if (!$params['is_system']) {
                $admin = new Admin();
                $user = $admin->getUserByToken($params['access_token']);
                if (!$user) {
                    return $this->formatData([], 1005, 'token不正确!');
                }
                if (!in_array($user->group_id, [1, 3, 4, 5, 6])) {
                    return $this->formatData([], 1005, '您无权限发布停电通知!');
                }
                $cid = $user->cid;
                $user_id = $user->id;
            } else {
                $cid = $params['cid'];
                $user_id = $params['user_id'];
            }

            if ($params['start_time'] >= $params['end_time']) {
                return $this->formatData([], 1005, '结束时间必须大于开始时间!');
            }

            $notice = new Notice();
            $notice->cid = $cid;
            $notice->user_id = $user_id;
            $notice->start_time = $params['start_time'];
            $notice->end_time = $params['end_time'];

            $notice->reason = $params['reason'];
            $notice->info = $params['info'];
            if ($notice->save()) {
                $line = new Line();
                $line_arr = explode(',', $params['line_ids']);
                $data = [];
                foreach ($line_arr as $key => $val) {
                    $data[$key]['nid'] = $notice->id;
                    $data[$key]['cid'] = $cid;
                    $l = $line->findOne($val);
                    $l3 = $line->findOne($l->parent_id);
                    $l2 = $line->findOne($l3->parent_id);
                    $data[$key]['line_id1'] = $l2->parent_id;
                    $data[$key]['line_id2'] = $l2->id;
                    $data[$key]['line_id3'] = $l3->id;
                    $data[$key]['linde_id4'] = $val;

                }
                \Yii::$app->db->createCommand()->batchInsert(NoticeLine::tableName(), ['nid', 'cid',
                    'line_id1', 'line_id2', 'line_id3', 'line_id4'], $data)->execute();
                $transaction->commit();
                $datax = ['action' => '/push/remind', 'params' => [$notice->id]];
                \Yii::$app->swooleAsync->async($datax);
                return $this->formatData([]);
            }

        } catch (Exception $e) {
            $transaction->rollBack();
            return $this->formatData([], 1002, $e->getMessage());
        }


    }

}