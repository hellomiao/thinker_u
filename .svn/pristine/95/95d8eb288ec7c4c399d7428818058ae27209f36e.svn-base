<?php
/**
 * Created by PhpStorm.
 * User: yangchunrun
 * Date: 17/4/19
 * Time: 下午6:44
 */

namespace app\admin\api;


use app\admin\models\Admin;
use app\admin\models\Line;
use app\admin\models\Notice;
use app\admin\models\NoticeLine;
use app\admin\models\Xiaoqu;
use app\api\components\BaseApi;
use app\base\lib\Utils;
use app\base\models\Config;
use yii\base\Exception;

class NoticeRun extends BaseApi
{
    protected function rules()
    {
        return [
            'access_token' => ['required' => true, 'name' => 'access_token', "message" => "access_token是必需的"],

        ];
    }

    public function run()
    {
        $transaction = \Yii::$app->db->beginTransaction();
        try {

            $params = $this->params;
            $page = $params['page'] ? $params['page'] : 1;
            $pageSize = 10;
            $offset = ($page - 1) * $pageSize;
            $admin = new Admin();
            $user = $admin->getUserByToken($params['access_token']);
            if (!$user) {
                return $this->formatData([], 1005, 'token不正确!');
            }
            

            $query = Notice::find()->from('{{%notice}} as t')->where(['t.cid'=>$user->cid,'t.status'=>[1,3]]);

            if($user->group_id==7){
                $xiaoqu=Xiaoqu::findOne($user->xiaoqu_id);
                $line_id4 = $xiaoqu->line_id4;
                $query->leftJoin('{{%notice_line}} as l','t.id =  l.nid');
                $query->andWhere(['l.line_id4'=>$line_id4]);
            }
            $count=$query->count();
            $hasmore = $page*$pageSize<$count;
            $notice = $query->offset($offset*$pageSize)->limit($pageSize)->orderBy('created_at desc')->all();
            $data = [];
            foreach ($notice as $key => $val) {
                $data[$key]['id']=$val->id;
                if ($val->reason == 1) {
                    $data[$key]['title'] = "由于我公司将对{$val->getLineName()}线路检修，将在下列时间对您所在的小区实施停电";
                    $data[$key]['start_time'] = "停电开始时间：{$val->start_time}";
                    $data[$key]['end_time'] = "停电开始时间：{$val->end_time}";
                } else {
                    $txt = $val->getReason()[$val->reason];
                    $data[$key]['title'] = "由于{$txt}，我公司将临时对{$val->getLineName()}线路进行故障抢修，将在下列时间对您所在的小区实施停电";
                    $data[$key]['start_time'] = "停电开始时间：{$val->start_time}";
                    $data[$key]['end_time'] = "停电开始时间：{$val->end_time}";
                }
                $data[$key]['info'] = $val->info;
                $data[$key]['range'] = $val->getXiaoqu();
                $data[$key]['created_at'] = date('Y年m月d日', $val->created_at);
            }
            return $this->formatData(['list'=>$data,'hasmore'=>$hasmore,'total'=>$count]);

        } catch (Exception $e) {
            $transaction->rollBack();
            return $this->formatData([], 1002, $e->getMessage());
        }


    }

}